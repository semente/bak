#!/bin/bash
## bak --- simple, efficient, and encrypted backups
#
# Copyright (C) 2016 Guilherme Gondim <https://semente.io>
#
# Website: https://github.com/semente/bak
# Keywords: backup, cryptography, commandline
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# exit on error
set -e

# default settings
FIND_ARGS=()
GPG_ARGS=(--quiet --yes --encrypt --sign)
LOGGER_ARGS=()
RSYNC_ARGS=(--chmod=0600)
TAR_ARGS=(--exclude-backups --exclude-caches --exclude-tag=.nobackup)

# Tar excludes patterns listed in .bakignore if found in the current directory
[ -f .bakignore ] && TAR_ARGS+=(--exclude=.bakignore --exclude-from=".bakignore")

# load custom settings
# XXX: undocumented; use carefully
for BAKRC in ".bakrc" "${XDG_CONFIG_HOME:-${HOME}/.config/bak/bakrc}" "${HOME}/.bakrc"; do
    if [ -f "$BAKRC" ]; then
        source "$BAKRC"
        break
    fi
done

# meta data
NAME=`basename $0`
VERSION="0.2-pre"
WEBSITE="https://github.com/semente/bak"
AUTHOR="Guilherme Gondim <https://semente.io>"

# internal use
DESTS=()
FORCE_FULL=0
VERBOSE=0

function PrintVersion() {
    echo "$NAME version $VERSION"
    echo "Copyright (C) 2016 by $AUTHOR"
    echo
    echo "$NAME comes with ABSOLUTELY NO WARRANTY.  This is free software, and"
    echo "you are welcome to redistribute it under certain conditions.  See the"
    echo "GNU General Public Licence version 3 for details."
}

function PrintUsage() {
    echo "Usage: $NAME [OPTION]... [[USER@]HOST:]DEST..."
    echo "Try \`$0 -h' for more information."
}

function PrintHelp() {
    PrintVersion
    echo
    PrintUsage | head -1
    echo "Creates a backup of the current directory to one or more DEST in local"
    echo "or remote hosts."
    echo
    echo "If a previous backup is detected, an incremental backup will occur."
    echo "i.e. only files modified after the last backup will be included into the"
    echo "backup archive. You must use the option \`-f' to force a full backup,"
    echo "if desired."
    echo
    echo " Examples:"
    echo
    echo "  cd \$HOME && $NAME /media/usb/backups"
    echo "  cd /some/dir/to/backup && $NAME -f /dest/one user@remote:/dest/two"
    echo
    echo " Options:"
    echo
    echo "  -f                      force a full backup"
    echo "  -r RECIPIENT-KEY        encrypt for user id RECIPIENT-KEY"
    echo "  -k SIGN-KEY             use SIGN-KEY as the key to sign with"
    echo "  -s SIZE                 don't backup any file larger than SIZE kbytes"
    echo "  -i IDENTITY-FILE        selects a identity for public key authentication over SSH"
    echo "  -u                      non interactive-commonly used for unattended operations"
    echo "  -v                      verbose (i.e. give more information during processing)"
    echo "  -d                      print commands as they are executed (for debug)"
    echo "  -n                      read commands but do not execute them (dry run)"
    echo "  -V                      print version number"
    echo "  -h                      show this help text"
    echo
    echo "See <$WEBSITE> for more information or bug reports."
}

function Log() {
    local msg="$*"
    if [ -x "`which logger`" ]; then
        logger "${LOGGER_ARGS[@]}" --tag="$NAME" $msg
    else
        echo "$NAME: $msg" >&2
    fi
}

function Warn() {
    local msg="$*"
    if [ $VERBOSE = 1 ]; then
        # On verbose mode, `Log' will also print its output to stderr
        # so there is no need to "echoing" the message here
        Log "$msg"
    else
        echo "$NAME: $msg" >&2
        Log "$msg"
    fi
}

function Fail() {
    local msg="$*"
    [ -n "$msg" ] && Warn "$msg"
    PrintUsage
    exit 2
}

function ParseCommandLine() {
    local option rcpt_key sign_key size identity_file
    while getopts fuvdnVhr:k:s:i: option; do
        case $option in
            f)
                FORCE_FULL=1
                ;;
            u)
                GPG_ARGS+=(--batch --no-tty)
                ;;
            v)                  # verbose
                VERBOSE=1
                GPG_ARGS+=(--verbose)
                RSYNC_ARGS+=(--verbose)
                TAR_ARGS+=(--verbose)
                LOGGER_ARGS+=(--stderr)
                ;;
            d)                  # debug
                set -x
                ;;
            n)                  # dry run
                Fail "dry run \(-n\) not implemented yet"
                #set -vn
                ;;
            V)                  # version
                PrintVersion && exit
                ;;
            h)                  # help
                PrintHelp && exit
                ;;
            r)
                rcpt_key="$OPTARG"
                GPG_ARGS+=(--recipient="$rcpt_key")
                ;;
            k)
                sign_key="$OPTARG"
                GPG_ARGS+=(--local-user="$sign_key")
                ;;
            s)
                size="$OPTARG"
                FIND_ARGS+=(-size "-${size}k")
                ;;
            i)
                identity_file="$OPTARG"
                RSYNC_ARGS+=(--rsh="ssh -i $identity_file")
                ;;
            *)                  # invalid option
                Fail
        esac
    done
    shift `expr $OPTIND - 1`

    local argnum=$#
    if [ $argnum -lt 1 ]; then
        Fail "missing destination operand"
    fi

    local dest
    for dest in "$@"; do
        # check if `$dest' have a form `[[USER@]HOST:]DEST'
        local user_re="[a-z0-9A-Z][-a-z0-9A-Z_]*"
        local host_re="[-a-z0-9A-Z_.]+"
        local dest_re="[-a-z0-9A-Z_/.~]+"
        set +e
        echo $dest | grep -E "^${dest_re}\$" > /dev/null
        if [ $? -gt 0 ]; then
            echo $dest | grep -E \
                "^((${user_re}@)?${host_re}:)?${dest_re}\$" > /dev/null
            if [ $? -gt 0 ]; then
                Fail "invalid destination $dest"
            fi
        fi
        set -e

        # excludes directory destination when performing a local backup
        TAR_ARGS+=(--exclude="$dest")

        DESTS+=("$dest")
    done
}

function Backup() {
    local dest=$1
    local hash=`echo "$dest" | sha1sum | cut -c -8`
    local lastfile=".${NAME}.${hash}"

    local baktype
    [ $FORCE_FULL = 1 ] && rm -f "$lastfile"
    [ -f "$lastfile" ] && baktype=incr || baktype=full

    # Determine where the backup file is temporarily stored before sent to `$dest'
    local bakdate="`date --utc --iso-8601=s`"
    local bakfile="`mktemp --suffix=-bak -d`/${bakdate}.${baktype}.tar.gz.gpg"
    trap "rm -f $bakfile && rmdir `dirname $bakfile`" EXIT

    # Use `$lastfile' as reference for the incremental backup
    [ $baktype = incr ] && local local_find_args=(-newer "$lastfile")

    # Make a list of files to backup that size is less than `$SIZE'
    # (if set) and newer than `$lastfile' (if present); then create a
    # PGP encrypted tar.gz archive.
    find "${FIND_ARGS[@]}" "${local_find_args[@]}" -type f -print0 |
        tar "${TAR_ARGS[@]}" \
            --exclude="$lastfile" \
            --null \
            --files-from - \
            -cz |
        gpg "${GPG_ARGS[@]}" \
            --output "$bakfile"

    # send backup to destination using rsync
    rsync "${RSYNC_ARGS[@]}" "$bakfile" "${dest}/"
    if [ $? -gt 0 ]; then
        Warn "Failed to send backtup to $dest"
    else
        Log "Sending backup of `pwd` to $dest succeeded"

        # update last modification time of `$lastfile' if backup succeeded
        touch -d "${bakdate}" "$lastfile"
    fi
}

function Main() {
    ParseCommandLine "$@"

    umask 077
    trap 'Warn "An unknown error occurred while backing up `pwd`. Aborted"' EXIT

    local dest
    for dest in "${DESTS[@]}"; do
        Backup "$dest"
    done
}

Main "$@"
